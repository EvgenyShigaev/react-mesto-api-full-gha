{"ast":null,"code":"export const BASE_URL = \"https://api.mesto-frontend.nomoreparties.co\";\nconst getJson = res => {\n  if (res.ok) {\n    return res.json();\n  } else {\n    return Promise.reject(`Ошибка: ${res.status}`);\n  }\n};\nexport const register = (email, password) => {\n  return fetch(`${BASE_URL}/signup`, {\n    method: \"POST\",\n    headers: {\n      Accept: \"application/json\",\n      \"Content-Type\": \"application/json\"\n    },\n    body: JSON.stringify({\n      email,\n      password\n    })\n  }).then(res => {\n    return getJson(res);\n  });\n};\nexport const login = (email, password) => {\n  return fetch(`${BASE_URL}/signin`, {\n    method: \"POST\",\n    headers: {\n      Accept: \"application/json\",\n      \"Content-Type\": \"application/json\"\n    },\n    body: JSON.stringify({\n      email,\n      password\n    })\n  }).then(res => {\n    return getJson(res);\n  });\n};\nexport const checkToken = token => {\n  return fetch(`${BASE_URL}/users/me`, {\n    method: \"GET\",\n    headers: {\n      Accept: \"application/json\",\n      \"Content-Type\": \"application/json\",\n      Authorization: `Bearer ${token}`\n    }\n  }).then(res => {\n    return getJson(res);\n  });\n};","map":{"version":3,"names":["BASE_URL","getJson","res","ok","json","Promise","reject","status","register","email","password","fetch","method","headers","Accept","body","JSON","stringify","then","login","checkToken","token","Authorization"],"sources":["C:/Users/Evgeny/dev/react-mesto-api-full-gha/frontend/src/utils/auth.js"],"sourcesContent":["export const BASE_URL = \"https://api.mesto-frontend.nomoreparties.co\";\r\n\r\nconst getJson = (res) => {\r\n  if (res.ok) {\r\n    return res.json();\r\n  } else {\r\n  return Promise.reject(`Ошибка: ${res.status}`);\r\n}\r\n}\r\n\r\nexport const register = (email, password) => {\r\n  return fetch(`${BASE_URL}/signup`, {\r\n    method: \"POST\",\r\n    headers: {\r\n      Accept: \"application/json\",\r\n      \"Content-Type\": \"application/json\",\r\n    },\r\n    body: JSON.stringify({ email, password }),\r\n  }).then((res) => { \r\n    return getJson(res); \r\n  }); \r\n}; \r\n\r\nexport const login = (email, password) => {\r\n  return fetch(`${BASE_URL}/signin`, {\r\n    method: \"POST\",\r\n    headers: {\r\n      Accept: \"application/json\", \r\n      \"Content-Type\": \"application/json\",\r\n    },\r\n    body: JSON.stringify({ email, password }),\r\n  }).then((res) => { \r\n    return getJson(res); \r\n  }); \r\n}; \r\n\r\nexport const checkToken = (token) => {\r\n  return fetch(`${BASE_URL}/users/me`, {\r\n    method: \"GET\",\r\n    headers: {\r\n      Accept: \"application/json\",\r\n      \"Content-Type\": \"application/json\",\r\n      Authorization: `Bearer ${token}`,\r\n    },\r\n  })\r\n  .then((res) => { \r\n    return getJson(res); \r\n  }); \r\n};\r\n"],"mappings":"AAAA,OAAO,MAAMA,QAAQ,GAAG,6CAA6C;AAErE,MAAMC,OAAO,GAAIC,GAAG,IAAK;EACvB,IAAIA,GAAG,CAACC,EAAE,EAAE;IACV,OAAOD,GAAG,CAACE,IAAI,CAAC,CAAC;EACnB,CAAC,MAAM;IACP,OAAOC,OAAO,CAACC,MAAM,CAAE,WAAUJ,GAAG,CAACK,MAAO,EAAC,CAAC;EAChD;AACA,CAAC;AAED,OAAO,MAAMC,QAAQ,GAAGA,CAACC,KAAK,EAAEC,QAAQ,KAAK;EAC3C,OAAOC,KAAK,CAAE,GAAEX,QAAS,SAAQ,EAAE;IACjCY,MAAM,EAAE,MAAM;IACdC,OAAO,EAAE;MACPC,MAAM,EAAE,kBAAkB;MAC1B,cAAc,EAAE;IAClB,CAAC;IACDC,IAAI,EAAEC,IAAI,CAACC,SAAS,CAAC;MAAER,KAAK;MAAEC;IAAS,CAAC;EAC1C,CAAC,CAAC,CAACQ,IAAI,CAAEhB,GAAG,IAAK;IACf,OAAOD,OAAO,CAACC,GAAG,CAAC;EACrB,CAAC,CAAC;AACJ,CAAC;AAED,OAAO,MAAMiB,KAAK,GAAGA,CAACV,KAAK,EAAEC,QAAQ,KAAK;EACxC,OAAOC,KAAK,CAAE,GAAEX,QAAS,SAAQ,EAAE;IACjCY,MAAM,EAAE,MAAM;IACdC,OAAO,EAAE;MACPC,MAAM,EAAE,kBAAkB;MAC1B,cAAc,EAAE;IAClB,CAAC;IACDC,IAAI,EAAEC,IAAI,CAACC,SAAS,CAAC;MAAER,KAAK;MAAEC;IAAS,CAAC;EAC1C,CAAC,CAAC,CAACQ,IAAI,CAAEhB,GAAG,IAAK;IACf,OAAOD,OAAO,CAACC,GAAG,CAAC;EACrB,CAAC,CAAC;AACJ,CAAC;AAED,OAAO,MAAMkB,UAAU,GAAIC,KAAK,IAAK;EACnC,OAAOV,KAAK,CAAE,GAAEX,QAAS,WAAU,EAAE;IACnCY,MAAM,EAAE,KAAK;IACbC,OAAO,EAAE;MACPC,MAAM,EAAE,kBAAkB;MAC1B,cAAc,EAAE,kBAAkB;MAClCQ,aAAa,EAAG,UAASD,KAAM;IACjC;EACF,CAAC,CAAC,CACDH,IAAI,CAAEhB,GAAG,IAAK;IACb,OAAOD,OAAO,CAACC,GAAG,CAAC;EACrB,CAAC,CAAC;AACJ,CAAC"},"metadata":{},"sourceType":"module","externalDependencies":[]}